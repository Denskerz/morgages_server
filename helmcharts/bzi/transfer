from fastapi import FastAPI, Depends, HTTPException
from sqlalchemy.ext.asyncio import AsyncSession
from datetime import datetime
import pandas as pd

from . import models, database
from .utils import process_excel_data, disk

app = FastAPI()

async def get_db_session() -> AsyncSession:
    async with database.async_session() as session:
        yield session

@app.post("/start")
async def start(start_date: datetime, end_date: datetime, session: AsyncSession = Depends(get_db_session)):
    data: tuple[dict[str, pd.DataFrame]] = process_excel_data(disk.paths_processing(start_date, end_date).reset_index(drop=True))
    disk.reset()

    try:
        for table in data:
            for table_name, df in table.items():
                model = models.table_model_map.get(table_name)
                if model is None:
                    raise HTTPException(status_code=400, detail=f"Unknown table: {table_name}")

                await df.to_sql(table_name, con=session.bind, if_exists='append', index=False)
    except Exception as e:
        await session.rollback()
        raise HTTPException(status_code=500, detail=str(e))

    return {"status": "Data uploaded successfully"}