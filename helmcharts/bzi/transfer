есть класс для создания сессии в бд 
class DatabaseSessionManager:
    def __init__(self, host: str, engine_kwargs: dict[str, Any] = {}):
        self._engine = create_async_engine(host, **engine_kwargs)
        self._sessionmaker = async_sessionmaker(autocommit=False, bind=self._engine)

    async def close(self) -> object:
        if self._engine is None:
            raise Exception("DatabaseSessionManager is not initialized")
        await self._engine.dispose()

        self._engine = None
        self._sessionmaker = None

    @contextlib.asynccontextmanager
    async def connect(self) -> AsyncIterator[AsyncConnection]:
        if self._engine is None:
            raise Exception("DatabaseSessionManager is not initialized")

        async with self._engine.begin() as connection:
            try:
                yield connection
            except Exception:
                await connection.rollback()
                raise

    @contextlib.asynccontextmanager
    async def session(self) -> AsyncIterator[AsyncSession]:
        if self._sessionmaker is None:
            raise Exception("DatabaseSessionManager is not initialized")

        session = self._sessionmaker()
        try:
            yield session
        except Exception:
            await session.rollback()
            raise
        finally:
            await session.close()


sessionmanager = DatabaseSessionManager(settings.database_url_asyncpg, {"echo": settings.ECHO_SQL})

async def get_db_session():
    async with sessionmanager.session() as session:
        yield session


и есть код, который выпадает в ошибку
@app.post("/start")
async def start(start_date: datetime, end_date: datetime, session: Session = Depends(get_db_session)):
    data: tuple[dict[str, pd.DataFrame]] = process_excel_data(disk.paths_processing(start_date, end_date).reset_index(drop=True))
    disk.reset()

    try:
        for table in data:
            for table_name, df in table.items():
                model = table_model_map.get(table_name)
                if model is None:
                    raise HTTPException(status_code=400, detail=f"Unknown table: {table_name}")

                await df.to_sql(table_name, con=session.bind, if_exists='append', index=False)
    except Exception as e:
        await session.rollback()
        raise HTTPException(status_code=500, detail=str(e))
    return {"status": "Data uploaded successfully"}

ошибка заключается в том, что AsyncSession has no attribute "cursor"
задача заключается в том, чтобы записать data: tuple[dict[str, pd.DataFrame]] в базу данных в соответствующие таблицы под названием "table_name" данные типа DataFrame

перепиши мне мой второй кусок кода, чтобы я мог законнектиться и записать данные 
