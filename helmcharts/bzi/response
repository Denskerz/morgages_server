import pandas as pd
from fastapi import FastAPI, HTTPException, Depends
from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine
from sqlalchemy.orm import sessionmaker
from typing import Any, AsyncIterator
import contextlib
import asyncpg
from datetime import datetime

app = FastAPI()

class DatabaseSessionManager:
    def __init__(self, host: str, engine_kwargs: dict[str, Any] = {}):
        self._engine = create_async_engine(host, **engine_kwargs)
        self._sessionmaker = sessionmaker(
            bind=self._engine, class_=AsyncSession, autocommit=False, autoflush=False
        )

    async def close(self) -> object:
        if self._engine is None:
            raise Exception("DatabaseSessionManager is not initialized")
        await self._engine.dispose()

        self._engine = None
        self._sessionmaker = None

    @contextlib.asynccontextmanager
    async def connect(self) -> AsyncIterator[AsyncConnection]:
        if self._engine is None:
            raise Exception("DatabaseSessionManager is not initialized")

        async with self._engine.begin() as connection:
            try:
                yield connection
            except Exception:
                await connection.rollback()
                raise

    @contextlib.asynccontextmanager
    async def session(self) -> AsyncIterator[AsyncSession]:
        if self._sessionmaker is None:
            raise Exception("DatabaseSessionManager is not initialized")

        session = self._sessionmaker()
        try:
            yield session
        except Exception:
            await session.rollback()
            raise
        finally:
            await session.close()


sessionmanager = DatabaseSessionManager(
    "postgresql+asyncpg://user:password@localhost/dbname", {"echo": True}
)

async def get_db_session():
    async with sessionmanager.session() as session:
        yield session

async def insert_dataframe_to_db(df: pd.DataFrame, table_name: str, connection):
    columns = ', '.join([f'"{col}"' for col in df.columns])
    values = ', '.join([f'${i+1}' for i in range(len(df.columns))])
    insert_statement = f'INSERT INTO {table_name} ({columns}) VALUES ({values})'

    for row in df.itertuples(index=False, name=None):
        await connection.execute(insert_statement, *row)

@app.post("/start")
async def start(start_date: datetime, end_date: datetime, session: AsyncSession = Depends(get_db_session)):
    data: tuple[dict[str, pd.DataFrame]] = process_excel_data(disk.paths_processing(start_date, end_date).reset_index(drop=True))
    disk.reset()

    try:
        async with session.begin():
            async with session.connection() as conn:
                connection = await asyncpg.connect(dsn="postgresql://user:password@localhost/dbname")
                try:
                    for table in data:
                        for table_name, df in table.items():
                            model = table_model_map.get(table_name)
                            if model is None:
                                raise HTTPException(status_code=400, detail=f"Unknown table: {table_name}")

                            await insert_dataframe_to_db(df, table_name, connection)
                finally:
                    await connection.close()
    except Exception as e:
        await session.rollback()
        raise HTTPException(status_code=500, detail=str(e))
    return {"status": "Data uploaded successfully"}

# Функция для процесса данных Excel
def process_excel_data(df: pd.DataFrame) -> tuple[dict[str, pd.DataFrame]]:
    # Ваш код для обработки данных
    pass

# Словарь для маппинга моделей к таблицам
table_model_map = {
    # 'table_name': ModelClass,
    # Добавьте маппинг ваших таблиц и моделей здесь
}